from agno.agent import Agent
from agno.team.team import Team
from agno.models.openai import OpenAIChat
from agno.models.google import Gemini
from agno.tools.scrapegraph import ScrapeGraphTools
from agno.tools.file import FileTools
from agno.tools.exa import ExaTools
from agno.tools.reasoning import ReasoningTools
from docx import Document
from docx.shared import Pt
from docx.oxml.ns import qn
import re
from dotenv import load_dotenv
import os

load_dotenv()

id=os.getenv("id")
api_key=os.getenv("api_key")
id_openai=os.getenv("id_openai")
api_key_openai=os.getenv("api_key_openai")
Data_Scraper=Agent(
    name="EU regulation crawler agent",
    # model=OpenAIChat(id=id_openai,api_key=api_key_openai),
    model=Gemini(id=id,api_key=api_key),
    tools=[ReasoningTools(add_instructions=True),FileTools(), ScrapeGraphTools(), ExaTools(include_domains=["eur-lex.europa.eu", "ec.europa.eu"])],
    show_tool_calls=True,
    
    description="""
    Specialized agent for crawling and extracting compliance-relevant information about European regulations affecting a specific company and industry. Focuses on trusted EU sources such as EUR-Lex and the European Commission website.
    """
    ,
    instructions="""
    You are a compliance-focused data scraping agent. Your role is to gather detailed, structured, and relevant information about a given company's regulatory environment in Europe, based on its industry. You are primarily responsible for collecting recent European regulations, directives, press releases, and legal documents that may affect the company.

    Follow these steps:

    1. Understand the target company and its industry context from the user input.

    2. Use `ExaTools` to search for recent legal documents, directives, or press releases on:
    - https://eur-lex.europa.eu/homepage.html (for legislation and directives)
    - https://ec.europa.eu/commission/presscorner/home/en (for press releases and regulatory announcements)

    3. Use `ScrapeGraphTools` to extract detailed data from any relevant pages found.

    4. Focus on identifying potential compliance areas such as:
    - Data privacy (e.g. GDPR)
    - AI regulation (e.g. EU AI Act)
    - Environmental directives
    - Industry-specific regulations

    5. If no regulations are found that specifically name the company, fall back to summarizing recent EU laws or directives that are highly likely to affect the industry. For example:
    - If no AI laws mention the company, summarize how the EU AI Act impacts the industry generally.

    6. Structure the findings into a clear and detailed Markdown file using `FileTools`. The file should include:
    - A metadata section at the top with:
        - Company name
        - Industry
        - Report generation date
        - List of data sources used
    - A table of contents or logical section headers
    - Categorized summaries (e.g. AI, Sustainability, Data Privacy)
    - Direct source links to each regulation
    - Dates of publication or enforcement

    7. Save the final file using `FileTools` with the name `compliance_automotive.md`.

    Only return verified and relevant information from the specified EU sources. Ignore speculative or opinion-based content. Prioritize factual, legal, and up-to-date documents from official EU regulatory domains.
    """
    ,
    markdown=True,
    stream=True,
    success_criteria="the agent HAS to generate the final file `compliance_automotive.md` using `FileTools`",
    
    
)


Data_Scraper.print_response("Find the most recent EU directives or regulations that apply to Renault in the automotive sector, especially related to AI, sustainability, or emissions. Structure the results in a clear compliance report. and save the final ouput as `compliance_automotive.md` file", markdown=True)

# Data_Analyzer=Agent(
#     name="Data Analyzer",
#     # model=OpenAIChat(id=id_openai,api_key=api_key_openai),
#     model=Gemini(id=id,api_key=api_key),
#     tools=[FileTools(),],
#     show_tool_calls=True,
#     description="""
#     Analytical agent that interprets structured compliance files generated by the EU Regulation Crawler Agent. It provides legally grounded answers based only on the content of the input file.
#     """,

#     instructions="""
#     You are a regulatory compliance analysis agent. Your job is to read a structured compliance file `compliance_automotive.md` generated by the Data_Scraper agent. This file contains summaries of EU regulations, categorized by topic and linked to their sources.

#     Your goal is to answer user questions like:
#     - "Is there any new EU directive affecting us as a car manufacturer?"
#     - "Does the EU AI Act apply to our use of AI in predictive maintenance?"
#     - "Are there any emissions-related regulations we need to follow in 2025?"

#     Workflow:
#     1. Load the structured Markdown file using `FileTools`.
#     2. Analyze the content by scanning all sections: AI, Privacy, Sustainability, Financial, etc.
#     3. Use only the contents of the loaded file to answer the question. Do not rely on external knowledge.
#     4. If the answer is found, provide:
#        - A clear explanation in plain English
#        - A direct quote or reference from the file
#        - The name and date of the regulation (if available)
#        - A link to the source (if provided)
#     5. If the information is **not available**, politely respond that no relevant regulation was found **within the provided file**, and suggest re-running the Data_Scraper for an updated report.
#     6. Save the final output as a `final_answer.md` file.

#     Answer clearly and precisely, grounded only in the contents of the given file.
#     """,
#     markdown=True,
#     stream=True,
# )

# Data_Analyzer.print_response("In the latest releases of the European Commission, is there any law or directive that impacts us as an automotive company (Renault)?  (Save the final output as a `final_answer.md` file)", markdown=True)

# Load markdown content

with open(
    r"C:\Users\hp\Downloads\AiAgents-yns\ComplianceAgent\compliance_automotive.md",
    "r",
    encoding="cp1252"   # ou "latin-1"
) as file:
    final_output = file.read()


# Initialize Word doc
doc = Document()
doc.add_heading("Final Compliance Analysis", 0)

def add_formatted_paragraph(doc, text):
    """Helper function to add a paragraph with properly formatted bold text"""
    p = doc.add_paragraph()
    # Split text by bold markers, preserving them in the result
    parts = re.split(r"(\*\*.+?\*\*)", text)
    for part in parts:
        if part.startswith("**") and part.endswith("**"):
            run = p.add_run(part[2:-2])
            run.bold = True
        else:
            p.add_run(part)
    return p

# Process line by line
for line in final_output.splitlines():
    line = line.strip()
    if not line:
        continue

    # Headings
    if line.startswith("# "):
        doc.add_heading(line[2:], level=1)
    elif line.startswith("## "):
        doc.add_heading(line[3:], level=2)
    elif line.startswith("### "):
        doc.add_heading(line[4:], level=3)

    # Bullet points: handle * or •
    elif line.startswith("* ") or line.startswith("• "):
        bullet_line = line[2:].strip()
        p = doc.add_paragraph(style='List Bullet')
        # Process all bold parts in the bullet point
        parts = re.split(r"(\*\*.+?\*\*)", bullet_line)
        for part in parts:
            if part.startswith("**") and part.endswith("**"):
                run = p.add_run(part[2:-2])
                run.bold = True
            else:
                p.add_run(part)

    # Normal or note text (with optional inline bolds)
    else:
        add_formatted_paragraph(doc, line)

# Save Word file
output_path = r"C:\Users\hp\Downloads\AiAgents-yns\ComplianceAgent\Final_Compliance_Analysis.docx"
doc.save(output_path)
print(f"Saved to: {output_path}")